
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v
Parsing SystemVerilog input from `/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v' to AST representation.
Generating RTLIL representation for module `\sequential_multiplier_16x16'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/sequential_multiplier_16x16/runs/ejecucion_16x16/tmp/synthesis/hierarchy.dot'.
Dumping module sequential_multiplier_16x16 to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \sequential_multiplier_16x16

3.2. Analyzing design hierarchy..
Top module:  \sequential_multiplier_16x16
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \sequential_multiplier_16x16

5.2. Analyzing design hierarchy..
Top module:  \sequential_multiplier_16x16
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:198$27 in module sequential_multiplier_16x16.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:189$26 in module sequential_multiplier_16x16.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:180$25 in module sequential_multiplier_16x16.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:171$24 in module sequential_multiplier_16x16.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:162$23 in module sequential_multiplier_16x16.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 8 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~5 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:251$41'.
Creating decoders for process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:248$40'.
Creating decoders for process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:245$39'.
Creating decoders for process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:198$27'.
     1/1: $1\n79_o[0:0]
Creating decoders for process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:189$26'.
     1/1: $1\n74_o[0:0]
Creating decoders for process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:180$25'.
     1/1: $1\n70_o[0:0]
Creating decoders for process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:171$24'.
     1/1: $1\n67_o[3:0]
Creating decoders for process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:162$23'.
     1/1: $1\n63_o[0:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\sequential_multiplier_16x16.\n79_o' from process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:198$27'.
No latch inferred for signal `\sequential_multiplier_16x16.\n74_o' from process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:189$26'.
No latch inferred for signal `\sequential_multiplier_16x16.\n70_o' from process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:180$25'.
No latch inferred for signal `\sequential_multiplier_16x16.\n67_o' from process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:171$24'.
No latch inferred for signal `\sequential_multiplier_16x16.\n63_o' from process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:162$23'.

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sequential_multiplier_16x16.\n116_q' using process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:251$41'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\sequential_multiplier_16x16.\n115_q' using process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:248$40'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\sequential_multiplier_16x16.\n114_q' using process `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:245$39'.
  created $dff cell `$procdff$74' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:251$41'.
Removing empty process `sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:248$40'.
Removing empty process `sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:245$39'.
Found and cleaned up 1 empty switch in `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:198$27'.
Removing empty process `sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:198$27'.
Found and cleaned up 1 empty switch in `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:189$26'.
Removing empty process `sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:189$26'.
Found and cleaned up 1 empty switch in `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:180$25'.
Removing empty process `sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:180$25'.
Found and cleaned up 1 empty switch in `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:171$24'.
Removing empty process `sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:171$24'.
Found and cleaned up 1 empty switch in `\sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:162$23'.
Removing empty process `sequential_multiplier_16x16.$proc$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:162$23'.
Cleaned up 5 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module sequential_multiplier_16x16...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.
<suppressed ~2 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 1 unused cells and 52 unused wires.
<suppressed ~3 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
    New ctrl vector for $pmux cell $procmux$49: { $procmux$45_CMP $auto$opt_reduce.cc:134:opt_pmux$76 }
    New ctrl vector for $pmux cell $procmux$55: { $auto$opt_reduce.cc:134:opt_pmux$78 $procmux$44_CMP }
    New ctrl vector for $pmux cell $procmux$67: { $procmux$47_CMP $auto$opt_reduce.cc:134:opt_pmux$80 }
    New ctrl vector for $pmux cell $procmux$43: { $procmux$46_CMP $procmux$45_CMP $auto$opt_reduce.cc:134:opt_pmux$82 }
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 4 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking sequential_multiplier_16x16.n114_q as FSM state register:
    Circuit seems to be self-resetting.

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$74 ($dff) from module sequential_multiplier_16x16 (D = \estado_sig, Q = \n114_q).
Adding SRST signal on $procdff$73 ($dff) from module sequential_multiplier_16x16 (D = \n90_o, Q = \n115_q, rval = 5'00000).
Adding EN signal on $auto$ff.cc:266:slice$90 ($sdff) from module sequential_multiplier_16x16 (D = \n86_o [4:0], Q = \n115_q).
Adding SRST signal on $procdff$72 ($dff) from module sequential_multiplier_16x16 (D = \n105_o [32:16], Q = \n116_q [32:16], rval = 17'00000000000000000).
Adding EN signal on $procdff$72 ($dff) from module sequential_multiplier_16x16 (D = \n107_o, Q = \n116_q [15:0]).
Adding EN signal on $auto$ff.cc:266:slice$92 ($sdff) from module sequential_multiplier_16x16 (D = \n105_o [32:16], Q = \n116_q [32:16]).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 3 unused cells and 3 unused wires.
<suppressed ~6 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.
<suppressed ~2 debug messages>

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 17) from port A of cell sequential_multiplier_16x16.$add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:117$1 ($add).
Removed top 1 bits (of 17) from port B of cell sequential_multiplier_16x16.$add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:117$1 ($add).
Removed top 3 bits (of 4) from port B of cell sequential_multiplier_16x16.$eq$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:151$18 ($eq).
Removed top 2 bits (of 4) from mux cell sequential_multiplier_16x16.$ternary$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:155$20 ($mux).
Removed top 2 bits (of 4) from port B of cell sequential_multiplier_16x16.$eq$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:157$21 ($eq).
Removed top 2 bits (of 4) from port B of cell sequential_multiplier_16x16.$eq$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:159$22 ($eq).
Removed top 27 bits (of 32) from port A of cell sequential_multiplier_16x16.$add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:211$29 ($add).
Removed top 31 bits (of 32) from port B of cell sequential_multiplier_16x16.$add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:211$29 ($add).
Removed top 27 bits (of 32) from port Y of cell sequential_multiplier_16x16.$add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:211$29 ($add).
Removed top 1 bits (of 5) from port B of cell sequential_multiplier_16x16.$eq$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:223$33 ($eq).
Removed top 3 bits (of 4) from port B of cell sequential_multiplier_16x16.$procmux$44_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell sequential_multiplier_16x16.$procmux$45_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell sequential_multiplier_16x16.$procmux$46_CMP0 ($eq).
Removed top 2 bits (of 4) from wire sequential_multiplier_16x16.n54_o.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sequential_multiplier_16x16:
  creating $macc model for $add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:117$1 ($add).
  creating $macc model for $add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:211$29 ($add).
  creating $alu model for $macc $add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:211$29.
  creating $alu model for $macc $add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:117$1.
  creating $alu cell for $add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:117$1: $auto$alumacc.cc:485:replace_alu$105
  creating $alu cell for $add$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:211$29: $auto$alumacc.cc:485:replace_alu$108
  created 2 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.
<suppressed ~37 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:139$12:
      Old ports: A=4'0011, B=4'0010, Y=\n37_o
      New ports: A=1'1, B=1'0, Y=\n37_o [0]
      New connections: \n37_o [3:1] = 3'001
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:155$20:
      Old ports: A=2'01, B=2'11, Y=\n54_o
      New ports: A=1'0, B=1'1, Y=\n54_o [1]
      New connections: \n54_o [0] = 1'1
  Optimizing cells in module \sequential_multiplier_16x16.
    Consolidated identical input bits for $mux cell $ternary$/openlane/designs/sequential_multiplier_16x16/src/sequential_multiplier_16x16.v:145$15:
      Old ports: A=\n37_o, B=4'0001, Y=\n44_o
      New ports: A={ 1'1 \n37_o [0] }, B=2'01, Y=\n44_o [1:0]
      New connections: \n44_o [3:2] = 2'00
  Optimizing cells in module \sequential_multiplier_16x16.
    Consolidated identical input bits for $pmux cell $procmux$61:
      Old ports: A=4'0000, B={ 2'00 \n54_o \n44_o 4'0001 }, Y=\estado_sig
      New ports: A=2'00, B={ \n54_o [1] 1'1 \n44_o [1:0] 2'01 }, Y=\estado_sig [1:0]
      New connections: \estado_sig [3:2] = 2'00
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 4 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.
<suppressed ~2 debug messages>

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$83 ($dffe) from module sequential_multiplier_16x16.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$83 ($dffe) from module sequential_multiplier_16x16.

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.
<suppressed ~1 debug messages>

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using template $paramod$081ba1a4a7201ecdb44563d3c3bd7013d1ebf4eb\_90_alu for cells of type $alu.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
No more expansions possible.
<suppressed ~518 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.
<suppressed ~100 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 18 unused cells and 132 unused wires.
<suppressed ~19 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\sequential_multiplier_16x16' to `<abc-temp-dir>/input.blif'..
Extracted 239 gates and 315 wires to a netlist network with 73 inputs and 46 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:       18
ABC RESULTS:              NAND cells:       14
ABC RESULTS:               NOT cells:        8
ABC RESULTS:               MUX cells:       34
ABC RESULTS:                OR cells:       23
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:            ANDNOT cells:       58
ABC RESULTS:               NOR cells:       19
ABC RESULTS:               AND cells:       11
ABC RESULTS:               XOR cells:       18
ABC RESULTS:        internal signals:      196
ABC RESULTS:           input signals:       73
ABC RESULTS:          output signals:       46
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.
<suppressed ~10 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 1 unused cells and 233 unused wires.
<suppressed ~24 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \sequential_multiplier_16x16

40.2. Analyzing design hierarchy..
Top module:  \sequential_multiplier_16x16
Removed 0 unused modules.

41. Printing statistics.

=== sequential_multiplier_16x16 ===

   Number of wires:                214
   Number of wire bits:            894
   Number of public wires:          50
   Number of public wire bits:     730
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                247
     $_ANDNOT_                      57
     $_AND_                         11
     $_DFFE_PP_                     18
     $_MUX_                         34
     $_NAND_                        14
     $_NOR_                         19
     $_NOT_                          7
     $_ORNOT_                        6
     $_OR_                          23
     $_SDFFE_PP0P_                  22
     $_XNOR_                        18
     $_XOR_                         18

42. Executing CHECK pass (checking for obvious problems).
Checking module sequential_multiplier_16x16...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/sequential_multiplier_16x16/runs/ejecucion_16x16/tmp/synthesis/post_techmap.dot'.
Dumping module sequential_multiplier_16x16 to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sequential_multiplier_16x16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sequential_multiplier_16x16.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sequential_multiplier_16x16'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sequential_multiplier_16x16.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 0 unused cells and 34 unused wires.
<suppressed ~34 debug messages>

47. Printing statistics.

=== sequential_multiplier_16x16 ===

   Number of wires:                180
   Number of wire bits:            378
   Number of public wires:          16
   Number of public wire bits:     214
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                247
     $_ANDNOT_                      57
     $_AND_                         11
     $_DFFE_PP_                     18
     $_MUX_                         34
     $_NAND_                        14
     $_NOR_                         19
     $_NOT_                          7
     $_ORNOT_                        6
     $_OR_                          23
     $_SDFFE_PP0P_                  22
     $_XNOR_                        18
     $_XOR_                         18

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/juanjo/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/juanjo/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/juanjo/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/juanjo/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\sequential_multiplier_16x16':
  mapped 40 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== sequential_multiplier_16x16 ===

   Number of wires:                242
   Number of wire bits:            440
   Number of public wires:          16
   Number of public wire bits:     214
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                309
     $_ANDNOT_                      57
     $_AND_                         11
     $_MUX_                         96
     $_NAND_                        14
     $_NOR_                         19
     $_NOT_                          7
     $_ORNOT_                        6
     $_OR_                          23
     $_XNOR_                        18
     $_XOR_                         18
     sky130_fd_sc_hd__dfxtp_2       40

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\sequential_multiplier_16x16' to `/tmp/yosys-abc-eZWmoT/input.blif'..
Extracted 269 gates and 343 wires to a netlist network with 73 inputs and 41 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-eZWmoT/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-eZWmoT/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-eZWmoT/input.blif 
ABC: + read_lib -w /openlane/designs/sequential_multiplier_16x16/runs/ejecucion_16x16/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/sequential_multiplier_16x16/runs/ejecucion_16x16/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =    9.54 MB. Time =     0.10 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/sequential_multiplier_16x16/runs/ejecucion_16x16/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/sequential_multiplier_16x16/runs/ejecucion_16x16/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (3072.92 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    240 ( 17.9 %)   Cap =  9.8 ff (  4.1 %)   Area =     1971.89 ( 82.1 %)   Delay =  3072.90 ps  ( 10.8 %)               
ABC: Path  0 --      19 : 0    5 pi                       A =   0.00  Df =  40.6  -22.7 ps  S =  61.9 ps  Cin =  0.0 ff  Cout =  12.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     172 : 2    1 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 294.5 -153.5 ps  S =  52.3 ps  Cin =  1.5 ff  Cout =   2.5 ff  Cmax = 299.4 ff  G =  163  
ABC: Path  2 --     173 : 4    1 sky130_fd_sc_hd__a31o_2  A =   8.76  Df = 530.0 -248.9 ps  S =  36.8 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 271.9 ff  G =   98  
ABC: Path  3 --     174 : 4    4 sky130_fd_sc_hd__a31o_2  A =   8.76  Df = 769.6 -184.6 ps  S =  98.2 ps  Cin =  2.4 ff  Cout =  14.2 ff  Cmax = 271.9 ff  G =  576  
ABC: Path  4 --     213 : 3    2 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df = 935.5 -163.8 ps  S = 148.2 ps  Cin =  4.6 ff  Cout =   9.2 ff  Cmax = 128.2 ff  G =  193  
ABC: Path  5 --     216 : 2    4 sky130_fd_sc_hd__nor2_2  A =   6.26  Df =1017.7  -63.3 ps  S = 179.9 ps  Cin =  4.4 ff  Cout =  14.3 ff  Cmax = 141.9 ff  G =  307  
ABC: Path  6 --     233 : 5    4 sky130_fd_sc_hd__o221a_2 A =  11.26  Df =1302.5  -82.0 ps  S = 100.8 ps  Cin =  2.3 ff  Cout =  14.3 ff  Cmax = 281.1 ff  G =  578  
ABC: Path  7 --     253 : 5    5 sky130_fd_sc_hd__o221a_2 A =  11.26  Df =1602.5 -122.3 ps  S = 122.4 ps  Cin =  2.3 ff  Cout =  18.7 ff  Cmax = 281.1 ff  G =  751  
ABC: Path  8 --     275 : 5    4 sky130_fd_sc_hd__o221a_2 A =  11.26  Df =1872.1 -172.6 ps  S =  66.9 ps  Cin =  2.3 ff  Cout =   7.5 ff  Cmax = 281.1 ff  G =  303  
ABC: Path  9 --     284 : 4    1 sky130_fd_sc_hd__or4bb_2 A =  12.51  Df =2462.9 -653.2 ps  S =  90.3 ps  Cin =  1.5 ff  Cout =   2.4 ff  Cmax = 312.2 ff  G =  157  
ABC: Path 10 --     287 : 4    1 sky130_fd_sc_hd__a31o_2  A =   8.76  Df =2711.9 -474.0 ps  S =  51.2 ps  Cin =  2.4 ff  Cout =   4.6 ff  Cmax = 271.9 ff  G =  188  
ABC: Path 11 --     289 : 3    1 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =3072.9 -714.1 ps  S = 417.9 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 128.2 ff  G =  733  
ABC: Start-point = pi18 (\product [19]).  End-point = po18 ($auto$rtlil.cc:2607:MuxGate$1101).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   73/   41  lat =    0  nd =   240  edge =    588  area =1972.07  delay =12.00  lev = 12
ABC: + write_blif /tmp/yosys-abc-eZWmoT/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       47
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       36
ABC RESULTS:        internal signals:      229
ABC RESULTS:           input signals:       73
ABC RESULTS:          output signals:       41
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sequential_multiplier_16x16..
Removed 48 unused cells and 487 unused wires.
<suppressed ~188 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module sequential_multiplier_16x16...
Warning: Wire sequential_multiplier_16x16.\product [31] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [30] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [29] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [28] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [27] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [26] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [25] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [24] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [23] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [22] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [21] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [20] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [19] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [18] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [17] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [16] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [15] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [14] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [13] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [12] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [11] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [10] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [9] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [8] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [7] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [6] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [5] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [4] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [3] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [2] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [1] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\product [0] is used but has no driver.
Warning: Wire sequential_multiplier_16x16.\done is used but has no driver.
Found and reported 33 problems.

61. Printing statistics.

=== sequential_multiplier_16x16 ===

   Number of wires:                253
   Number of wire bits:            314
   Number of public wires:          14
   Number of public wire bits:      75
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                280
     sky130_fd_sc_hd__a211o_2        1
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2       12
     sky130_fd_sc_hd__a221o_2        2
     sky130_fd_sc_hd__a22o_2         7
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         5
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2        20
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         5
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__buf_1         36
     sky130_fd_sc_hd__dfxtp_2       40
     sky130_fd_sc_hd__inv_2          7
     sky130_fd_sc_hd__mux2_2        47
     sky130_fd_sc_hd__nand2_2       17
     sky130_fd_sc_hd__nor2_2        19
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o211a_2        2
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2         6
     sky130_fd_sc_hd__o21ai_2        6
     sky130_fd_sc_hd__o221a_2        4
     sky130_fd_sc_hd__o22a_2         2
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__or2_2         16
     sky130_fd_sc_hd__or2b_2         1
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2        4
     sky130_fd_sc_hd__xor2_2         6

   Chip area for module '\sequential_multiplier_16x16': 2822.707200

62. Executing Verilog backend.
Dumping module `\sequential_multiplier_16x16'.

Warnings: 33 unique messages, 33 total
End of script. Logfile hash: f1387f9459, CPU: user 1.31s system 0.07s, MEM: 29.93 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 45% 2x abc (1 sec), 13% 4x stat (0 sec), ...
